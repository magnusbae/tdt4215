package parser;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.StringTokenizer;/** * @author Klassen tar inn en html fil eller en url til en html side og stripper *         denne for html tagger */public class HtmlStripper {	private File[] files;	private String url;	private String orginalFile = "";	private String pBoundary = "";	private String sBoundary = "";	private XMLParser xmlP;	/**	 * Konstruktoren som tar inn en url og som henter inn parametre fra	 * konfigurasjonsfila	 * 	 * @param url	 *            String	 * @param sBoundary	 *            String	 * @param pBoundary	 *            String	 * @param allsmall	 *            String	 * @param xmlP	 *            XMLParser	 */	public HtmlStripper(String url, String sBoundary, String pBoundary,			String allsmall, XMLParser xmlP) {		this.url = url;		this.pBoundary = pBoundary;		this.sBoundary = sBoundary;		this.xmlP = xmlP;		try {			orginalFile = findSource(url);		} catch (MalformedURLException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		parseFile(orginalFile);	}	/**	 * Konstruktoren som tar inn html fil fra fil	 * 	 * @param filename	 *            String	 * @param rootname	 *            String	 * @param url	 *            String	 */	public HtmlStripper(String filename, XMLParser xmlP, String sBoundary,			String pBoundary) {		File file = new File(filename);		this.url = file.getName();		this.xmlP = xmlP;		this.pBoundary = pBoundary;		this.sBoundary = sBoundary;		if (file.isDirectory()) {// sjekker om det sendes inn en katalog			System.out.println("Filen er en directory");			files = file.listFiles();// henter filene som er i den katalogen			for (int i = 0; i < files.length; i++) {				new HtmlStripper(files[i].getAbsolutePath(), xmlP, sBoundary,						pBoundary);			}		} else {// hvis ikke en katalog			System.out.println("Filen er en fil");			try {				orginalFile = readFile(file);			} catch (IOException e) {				e.printStackTrace();			}			parseFile(orginalFile);		}	}	/**	 * Metode som henter ut metadata fra fil Mulighet for utvidelse av system	 */	public ArrayList getMeta(String file) {		ArrayList meta = new ArrayList();		int start = file.indexOf("meta name=\"keywords\" content=\"");		int slutt = file.indexOf("\">", start);		String keyWords = file.substring(start + 30, slutt);		StringTokenizer st = new StringTokenizer(keyWords, ",");		while (st.hasMoreTokens()) {			meta.add(st.nextToken());		}		start = file.indexOf("<meta name=\"description\" content=\"");		slutt = file.indexOf("\">", start);		keyWords = file.substring(start + 31, slutt);		StringTokenizer st2 = new StringTokenizer(keyWords, ",");		while (st2.hasMoreTokens()) {			meta.add(st.nextToken());		}		return meta;	}	/**	 * Denne metoden kaller alle de forskjellige metodene som parser file	 * 	 * @param file	 *            String	 */	public void parseFile(String file) {		String tagsRemoved = "";		ArrayList sourceList = searchFrame(file);		String ferdigFil = file.toLowerCase();		String title = searchTitle(ferdigFil);		String strippedFrame;		orginalFile = ferdigFil;		tagsRemoved = strip(orginalFile);		tagsRemoved = stripWhiteSpace(tagsRemoved);		for (int i = 0; i < sourceList.size(); i++) {			strippedFrame = parseFrame((String) sourceList.get(i));			tagsRemoved += strippedFrame;		}		try {			xmlP.makeXmlTokenizer(title, url, tagsRemoved);		} catch (FileNotFoundException e) {			e.printStackTrace();		} catch (SecurityException e) {			e.printStackTrace();		}	}	/**	 * Metoden kaller de metodene som må kalles for å parse innholdet i en frame	 * 	 * @param frame	 *            String	 * @return String	 */	private String parseFrame(String frame) {		String tagsRemovedFromeFrame = "";		ArrayList sourceList = searchFrame(frame);		frame = frame.toLowerCase();		frame = letterStripping(frame);		frame = stripSpecialChar(frame);		tagsRemovedFromeFrame = strip(frame);		tagsRemovedFromeFrame = stripWhiteSpace(tagsRemovedFromeFrame);		return tagsRemovedFromeFrame;	}	/**	 * Metoden leser filen og legger den i en string variabel	 * 	 * @param filename	 *            File	 * @return String	 * @throws java.io.IOException	 */	public String readFile(File filename) throws IOException {		BufferedReader in = new BufferedReader(new FileReader(filename));		String file = "";		String temp;		while ((temp = in.readLine()) != null) {			file += temp;			file += " ";		}		return file;	}	/**	 * Metoden finner tittlen til html siden	 * 	 * @param file	 *            String	 * @return String	 */	public String searchTitle(String file) {		String title = "";		int start = file.indexOf("<title>");		int slutt = file.lastIndexOf("</title>");		if (start == -1 || slutt == -1) {			return title;		}		else {			title = file.substring(start + 7, slutt);						title = letterStripping(title);			title = stripSpecialChar(title);			return title;		}	}	/**	 * Metoden finner eventuelle frames som er i html fila	 * 	 * @param file	 *            String	 * @return ArrayList	 */	public ArrayList searchFrame(String file) {		if (file == null) {			System.out.println("file er null");		}		String frame = "";		ArrayList frameList = new ArrayList();		if(file.contains("€")){			System.out.println("!!!!ERROR!!!!");			return null;		}		file = file.replaceAll("\\<(FRAME|frame) (SRC|src) =\"(.*?)\".+?\\>",				"€" + "$1" + "€L");		while ((file.indexOf("€")) != -1 || (file.indexOf("€L")) != -1) {			int first = file.indexOf("€");			int last = file.indexOf("€L");			frame = file.substring(first + 1, last);			file = file.replaceFirst("€" + frame + "€L", " ");			if (frame.startsWith("http")) {				frameList.add(frame);			} else {				frame = url + frame;				frameList.add(frame);			}		}		String source;		ArrayList sourceList = new ArrayList();		for (int i = 0; i < frameList.size(); i++) {			try {				source = findSource((String) frameList.get(i));				sourceList.add(source);			} catch (MalformedURLException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}		return sourceList;	}	/**	 * Metoden finner kildekoden til en url	 * 	 * @param urlForFrame	 *            String	 * @return String	 * @throws java.net.MalformedURLException	 * @throws java.io.IOException	 */	public String findSource(String urlForFrame) throws MalformedURLException,			IOException {		URL frameUrl = new URL(urlForFrame);		Object source = frameUrl.getContent();		InputStream is = (InputStream) source;		BufferedReader br = new BufferedReader(new InputStreamReader(				frameUrl.openStream()));		String content = "";		String linje = br.readLine();		while (linje != null) {			content = content.concat(linje);			linje = br.readLine();		}		return content;	}	/**	 * Metoden fjerner de fleste html tagger og mellomrom	 * 	 * @param file	 *            String	 * @return	 */	public String strip(String file) {		file = file.replaceAll("(\\p{Space}){2,}", " ");		// file = file.replaceAll("\\s{2,}", " ");		file = file.replaceAll("<a href=\"http://(.*?)\".+?/a>", " "				+ "http://$1" + " ");		file = file.replaceAll("<a href=\"#(.*?)\".+?/a>", " " + url + "#$1"				+ " ");		file = file.replaceAll("<a href=\"(.*?)\".+?/a>", " " + url + "$1"				+ " ");		file = file.replaceAll("(<script.+?</script>)+", "");		file = file.replaceAll("<p>", pBoundary);		file = file.replaceAll("<[^>]*>", " ");		file = file.replaceAll("</[^>]*>", " ");		file = file.replaceAll("(<meta.*>)+?", "");		file = file.replaceAll("#.*\\{[^\\}]*\\}", " "); // tar stylesheet															// oppmerking		file = letterStripping(file);//		file = stripSpecialChar(file);		file = file.replaceAll("mailto:(.*?)", "$1");		char[] tegn = { ',', ';', '!' };		for (int i = 0; i < tegn.length; i++) {			file = file.replaceAll((String.valueOf(tegn[i])), sBoundary);		}		file = file.replaceAll("\"", " ");		file = file.replaceAll("\'", " ");		return file;	}	/**	 * Metoden fjerner spesialtegn som kan forekomme i html	 * 	 * @param file	 *            String	 * @return	 */	public String stripSpecialChar(String file) {		file = file.replaceAll("&nbsp;", " ");		file = file.replaceAll("&lt;", " ");		file = file.replaceAll("&gt;", " ");		file = file.replaceAll("&copy;", " ");		file = file.replaceAll("&#[^;];", " ");		file = file.replaceAll("&#150", " ");// dette er bindestrek		file = file.replaceAll("&", " ");		file = file.replaceAll("#", " ");		file = file.replaceAll("\\|", " ");		file = file.replaceAll("-", " ");		file = file.replaceAll("\"", " ");		file = file.replaceAll("\\)", " ");		return file;	}	/**	 * Metoden fjerner alle whiteSpaces som er overflødige	 * 	 * @param file	 *            String	 * @return String	 */	public String stripWhiteSpace(String file) {		char[] liste = file.toCharArray();		for (int i = 0; i < (liste.length - 1); i++) {			if (Character.isWhitespace(liste[i]) || liste[i] == 'S') {				if (Character.isWhitespace(liste[i + 1]) || liste[i + 1] == 'S') {					liste[i] = 'Ø';				}			}		}		String newfile = String.valueOf(liste);		newfile = newfile.replaceAll("Ø", "");		newfile = newfile.replaceAll("S", " ");		return newfile;	}	/**	 * Metoden gjør om bokstaver som har spesialtegn i html til vanlige	 * bokstaver	 * 	 * @param file	 *            String	 * @return String	 */	public String letterStripping(String file) {		// fransk		file = file.replaceAll("&agrave;", "à");		file = file.replaceAll("&acirc;", "â");		file = file.replaceAll("&ccedil;", "ç");		file = file.replaceAll("&egrave;", "è");		file = file.replaceAll("&ecirc;", "ê");		file = file.replaceAll("&euml;", "ë");		file = file.replaceAll("&icirc;", "î");		file = file.replaceAll("&iuml;", "ï");		file = file.replaceAll("&ocirc;", "ô");		file = file.replaceAll("&aelig;", "æ");		file = file.replaceAll("œ", "");		file = file.replaceAll("&ugrave;", "ù");		// tysk		file = file.replaceAll("&auml;", "ä");		file = file.replaceAll("&ouml;", "ö");		file = file.replaceAll("&uuml;", "ü");		file = file.replaceAll("&szlig;", "ß");		// norsk		file = file.replaceAll("&aring;", "å");		file = file.replaceAll("&Aring;", "Å");		file = file.replaceAll("&oslash;", "ø");		file = file.replaceAll("&Oslash;", "Ø");		file = file.replaceAll("&aelig;", "æ");		file = file.replaceAll("&AElig;", "Æ");		return file;	}	/**	 * Main metoden som starter alt	 * 	 * @param args	 *            String	 */	public static void main(String[] args) {		XMLParser xmlP = new XMLParser(new File("config.xml"),				false);	}}